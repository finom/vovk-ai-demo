{
  "$schema": "https://vovk.dev/api/schema/v3/segment.json",
  "emitSchema": true,
  "segmentName": "",
  "segmentType": "segment",
  "controllers": {
    "UserRPC": {
      "rpcModuleName": "UserRPC",
      "originalControllerName": "UserController",
      "prefix": "users",
      "handlers": {
        "getUsers": {
          "validation": {},
          "operationObject": {
            "summary": "Get all users",
            "description": "Retrieves a list of all users.",
            "x-tool-disable": true
          },
          "path": "",
          "httpMethod": "GET"
        },
        "findUsers": {
          "validation": {
            "query": {
              "$schema": "http://json-schema.org/draft-07/schema#",
              "type": "object",
              "properties": {
                "search": {
                  "description": "Search term for users",
                  "examples": ["john.doe", "Jane"],
                  "type": "string"
                }
              },
              "required": ["search"],
              "additionalProperties": false
            }
          },
          "operationObject": {
            "summary": "Find users by ID, full name, or email",
            "description": "Retrieves users that match the provided ID, full name, or email. Used to search the users when they need to be updated or deleted.",
            "x-tool-successMessage": "Users found successfully"
          },
          "path": "search",
          "httpMethod": "GET"
        },
        "createUser": {
          "validation": {
            "body": {
              "$schema": "http://json-schema.org/draft-07/schema#",
              "type": "object",
              "properties": {
                "fullName": {
                  "examples": ["John Doe"],
                  "description": "Full name of the user",
                  "type": "string"
                },
                "email": {
                  "examples": ["john.doe@example.com"],
                  "description": "Email address of the user",
                  "type": "string"
                },
                "imageUrl": {
                  "anyOf": [
                    {
                      "examples": ["https://example.com/image.jpg"],
                      "description": "Profile image URL of the user",
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "required": ["fullName", "email"],
              "additionalProperties": false
            }
          },
          "operationObject": {
            "summary": "Create user",
            "description": "Creates a new user with the provided details.",
            "x-tool-successMessage": "User created successfully"
          },
          "path": "",
          "httpMethod": "POST"
        },
        "updateUser": {
          "validation": {
            "body": {
              "$schema": "http://json-schema.org/draft-07/schema#",
              "type": "object",
              "properties": {
                "fullName": {
                  "examples": ["John Doe"],
                  "description": "Full name of the user",
                  "type": "string"
                },
                "email": {
                  "examples": ["john.doe@example.com"],
                  "description": "Email address of the user",
                  "type": "string"
                },
                "imageUrl": {
                  "anyOf": [
                    {
                      "examples": ["https://example.com/image.jpg"],
                      "description": "Profile image URL of the user",
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            "params": {
              "$schema": "http://json-schema.org/draft-07/schema#",
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "pattern": "^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$"
                }
              },
              "required": ["id"],
              "additionalProperties": false
            }
          },
          "operationObject": {
            "summary": "Update user",
            "description": "Updates an existing user with the provided details, such as their email or name.",
            "x-tool-successMessage": "User updated successfully"
          },
          "path": "{id}",
          "httpMethod": "PUT"
        },
        "deleteUser": {
          "validation": {
            "params": {
              "$schema": "http://json-schema.org/draft-07/schema#",
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "pattern": "^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$"
                }
              },
              "required": ["id"],
              "additionalProperties": false
            }
          },
          "operationObject": {
            "summary": "Delete user",
            "description": "Deletes a user by ID.",
            "x-tool-successMessage": "User deleted successfully"
          },
          "path": "{id}",
          "httpMethod": "DELETE"
        }
      }
    },
    "TaskRPC": {
      "rpcModuleName": "TaskRPC",
      "originalControllerName": "TaskController",
      "prefix": "tasks",
      "handlers": {
        "getTasks": {
          "validation": {},
          "operationObject": {
            "summary": "Get all tasks",
            "description": "Retrieves a list of all tasks.",
            "x-tool-disable": true
          },
          "path": "",
          "httpMethod": "GET"
        },
        "findTasks": {
          "validation": {
            "query": {
              "$schema": "http://json-schema.org/draft-07/schema#",
              "type": "object",
              "properties": {
                "search": {
                  "description": "Search term for tasks",
                  "examples": ["bug", "feature"],
                  "type": "string"
                }
              },
              "required": ["search"],
              "additionalProperties": false
            }
          },
          "operationObject": {
            "summary": "Find tasks by ID, title or description",
            "description": "Retrieves tasks that match the provided ID, title, or description. Used to search the tasks when they need to be updated or deleted.",
            "x-tool-successMessage": "Tasks found successfully"
          },
          "path": "search",
          "httpMethod": "GET"
        },
        "getTasksByUserId": {
          "validation": {
            "params": {
              "$schema": "http://json-schema.org/draft-07/schema#",
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "format": "uuid",
                  "pattern": "^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$"
                }
              },
              "required": ["userId"],
              "additionalProperties": false
            }
          },
          "operationObject": {
            "summary": "Get tasks assigned to a specific user",
            "description": "Retrieves all tasks associated with a specific user ID.",
            "x-tool-successMessage": "Tasks retrieved successfully"
          },
          "path": "by-user/{userId}",
          "httpMethod": "GET"
        },
        "createTask": {
          "validation": {
            "body": {
              "$schema": "http://json-schema.org/draft-07/schema#",
              "type": "object",
              "properties": {
                "title": {
                  "examples": ["Implement authentication"],
                  "description": "Title of the task",
                  "type": "string"
                },
                "description": {
                  "examples": ["Implement user authentication using JWT"],
                  "description": "Description of the task",
                  "type": "string"
                },
                "status": {
                  "examples": ["TODO"],
                  "description": "Status of the task",
                  "default": "TODO",
                  "type": "string",
                  "enum": ["TODO", "IN_PROGRESS", "IN_REVIEW", "DONE"]
                },
                "userId": {
                  "examples": ["a3bb189e-8bf9-3888-9912-ace4e6543002"],
                  "description": "ID of the user who owns the task",
                  "type": "string",
                  "format": "uuid",
                  "pattern": "^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$"
                }
              },
              "required": ["title", "description", "status", "userId"],
              "additionalProperties": false
            }
          },
          "operationObject": {
            "summary": "Create a new task",
            "description": "Creates a new task with the provided details, such as its title and description.",
            "x-tool-successMessage": "Task created successfully"
          },
          "path": "",
          "httpMethod": "POST"
        },
        "updateTask": {
          "validation": {
            "body": {
              "$schema": "http://json-schema.org/draft-07/schema#",
              "type": "object",
              "properties": {
                "title": {
                  "examples": ["Implement authentication"],
                  "description": "Title of the task",
                  "type": "string"
                },
                "description": {
                  "examples": ["Implement user authentication using JWT"],
                  "description": "Description of the task",
                  "type": "string"
                },
                "status": {
                  "examples": ["TODO"],
                  "description": "Status of the task",
                  "default": "TODO",
                  "type": "string",
                  "enum": ["TODO", "IN_PROGRESS", "IN_REVIEW", "DONE"]
                },
                "userId": {
                  "examples": ["a3bb189e-8bf9-3888-9912-ace4e6543002"],
                  "description": "ID of the user who owns the task",
                  "type": "string",
                  "format": "uuid",
                  "pattern": "^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$"
                }
              },
              "additionalProperties": false
            },
            "params": {
              "$schema": "http://json-schema.org/draft-07/schema#",
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "pattern": "^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$"
                }
              },
              "required": ["id"],
              "additionalProperties": false
            }
          },
          "operationObject": {
            "summary": "Update task",
            "description": "Updates an existing task with the provided details, such as its title or description.",
            "x-tool-successMessage": "Task updated successfully"
          },
          "path": "{id}",
          "httpMethod": "PUT"
        },
        "deleteTask": {
          "validation": {
            "params": {
              "$schema": "http://json-schema.org/draft-07/schema#",
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "pattern": "^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$"
                }
              },
              "required": ["id"],
              "additionalProperties": false
            }
          },
          "operationObject": {
            "summary": "Delete task",
            "description": "Deletes a task by ID.",
            "x-tool-successMessage": "Task deleted successfully"
          },
          "path": "{id}",
          "httpMethod": "DELETE"
        }
      }
    },
    "RealtimeRPC": {
      "rpcModuleName": "RealtimeRPC",
      "originalControllerName": "RealtimeController",
      "prefix": "realtime",
      "handlers": {
        "session": {
          "validation": {
            "query": {
              "$schema": "http://json-schema.org/draft-07/schema#",
              "type": "object",
              "properties": {
                "voice": {
                  "type": "string",
                  "enum": ["ash", "ballad", "coral", "sage", "verse"]
                }
              },
              "required": ["voice"],
              "additionalProperties": false
            }
          },
          "path": "session",
          "httpMethod": "GET"
        }
      }
    },
    "DatabasePollRPC": {
      "rpcModuleName": "DatabasePollRPC",
      "originalControllerName": "DatabasePollController",
      "prefix": "poll",
      "handlers": {
        "poll": {
          "validation": {
            "iteration": {
              "$schema": "http://json-schema.org/draft-07/schema#",
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "pattern": "^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$"
                    },
                    "entityType": {
                      "type": "string",
                      "enum": ["user", "task"]
                    },
                    "__isDeleted": {
                      "type": "boolean"
                    }
                  },
                  "required": ["id", "entityType"],
                  "additionalProperties": false
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "pattern": "^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$"
                    },
                    "entityType": {
                      "default": "user",
                      "type": "string",
                      "const": "user"
                    },
                    "createdAt": {
                      "type": "string",
                      "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$"
                    },
                    "updatedAt": {
                      "type": "string",
                      "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$"
                    },
                    "fullName": {
                      "examples": ["John Doe"],
                      "description": "Full name of the user",
                      "type": "string"
                    },
                    "email": {
                      "examples": ["john.doe@example.com"],
                      "description": "Email address of the user",
                      "type": "string"
                    },
                    "imageUrl": {
                      "anyOf": [
                        {
                          "examples": ["https://example.com/image.jpg"],
                          "description": "Profile image URL of the user",
                          "type": "string"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "entityType",
                    "createdAt",
                    "updatedAt",
                    "fullName",
                    "email"
                  ],
                  "additionalProperties": false
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "pattern": "^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$"
                    },
                    "entityType": {
                      "default": "task",
                      "type": "string",
                      "const": "task"
                    },
                    "createdAt": {
                      "type": "string",
                      "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$"
                    },
                    "updatedAt": {
                      "type": "string",
                      "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$"
                    },
                    "title": {
                      "examples": ["Implement authentication"],
                      "description": "Title of the task",
                      "type": "string"
                    },
                    "description": {
                      "examples": ["Implement user authentication using JWT"],
                      "description": "Description of the task",
                      "type": "string"
                    },
                    "status": {
                      "examples": ["TODO"],
                      "description": "Status of the task",
                      "default": "TODO",
                      "type": "string",
                      "enum": ["TODO", "IN_PROGRESS", "IN_REVIEW", "DONE"]
                    },
                    "userId": {
                      "examples": ["a3bb189e-8bf9-3888-9912-ace4e6543002"],
                      "description": "ID of the user who owns the task",
                      "type": "string",
                      "format": "uuid",
                      "pattern": "^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$"
                    }
                  },
                  "required": [
                    "id",
                    "entityType",
                    "createdAt",
                    "updatedAt",
                    "title",
                    "description",
                    "status",
                    "userId"
                  ],
                  "additionalProperties": false
                }
              ]
            }
          },
          "path": "",
          "httpMethod": "GET"
        }
      }
    },
    "_TelegramRPC_": {
      "rpcModuleName": "_TelegramRPC_",
      "originalControllerName": "TelegramController",
      "prefix": "telegram",
      "handlers": {
        "handle": {
          "path": "bot",
          "httpMethod": "POST"
        }
      }
    }
  }
}
