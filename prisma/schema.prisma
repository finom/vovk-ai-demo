// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider      = "zod-prisma"
  output        = "../src/zod"
  relationModel = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id         String     @id @default(uuid()) /// @zod.custom(z.string().uuid().transform((val) => val as string & { e: typeof EntityType.user }))
  entityType EntityType @default(user) /// @zod.custom(z.literal(EntityType.user))
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt

  fullName   String
  email      String    @unique
  imageUrl   String?

  tasks      Task[]
}

model Task {
  id         String     @id @default(uuid()) /// @zod.custom(z.string().uuid().transform((val) => val as string & { e: typeof EntityType.task }))
  entityType EntityType @default(task) /// @zod.custom(z.literal(EntityType.task))
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt

  title      String
  description String
  status     TaskStatus @default(TODO)
  /// @zod.custom(z.string().uuid().transform((val) => val as string & { e: typeof EntityType.user }))
  userId     String

  user       User       @relation(fields: [userId], references: [id])
}

enum EntityType {
  user
  task
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}